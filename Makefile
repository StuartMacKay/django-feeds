#
# Makefile: Commands to simplify development and releases
#
# Usage:
#
#    make clean
#    make checks
#    make tests
#    make patch build upload

# This Makefile only works with GNU Make.

PYTHON = python3.10

# Where everything lives
site_python := /usr/bin/env $(PYTHON)

root_dir := $(realpath .)
app_dir = $(root_dir)/src/app_project
demo_dir = $(root_dir)/project

venv_name = venv
venv_dir = $(root_dir)/$(venv_name)
python = $(venv_dir)/bin/python

pip = $(python) -m pip
pip-compile = $(venv_dir)/bin/pip-compile
pip-sync = $(venv_dir)/bin/pip-sync
django = $(python) $(root_dir)/manage.py
flake8 = $(python) -m flake8
black = $(python) -m black
isort = $(python) -m isort
mypy = $(python) -m mypy
pytest = $(python) -m pytest
coverage = $(python) -m coverage
bumpversion = $(venv_dir)/bin/bump2version
tox = $(venv_dir)/bin/tox
twine = $(venv_dir)/bin/twine

# Options or flags
pytest_opts :=

commit_opts := --gpg-sign
upload_opts := --skip-existing --sign


# include additional targets or override variables from local makefiles
-include *.mk

.PHONY: help
help:
	@echo "Please use 'make <target>' where <target> is one of:"
	@echo ""
	@echo "  help                 to show this list"
	@echo "  clean-build          to clean the files and directories generated by previous builds"
	@echo "  clean-docs           to clean the generated HTML documentation"
	@echo "  clean-tests          to clean the directories created during testing"
	@echo "  clean-coverage       to clean the test coverage data and reports"
	@echo "  clean-venv           to clean the virtualenv"
	@echo "  clean                to clean everything EXCEPT the virtualenv"
	@echo
	@echo "  build                to build the package"
	@echo "  checks               to run quality code checks"
	@echo "  coverage             to measure the test coverage"
	@echo "  docs                 to build the HTML documentation"
	@echo "  install              to install the project dependencies in the virtualenv"
	@echo "  major                to update the version number for a major release, e.g. 2.1 to 3.0"
	@echo "  messages             to run the makemessages and compilemessages management commands"
	@echo "  migrate              to run migrate management command"
	@echo "  migrations           to run makemigrations management command"
	@echo "  minor                to update the version number for a minor release, e.g. 2.1 to 2.2"
	@echo "  patch                to update the version number for a patch release, e.g. 2.1.1 to 2.1.2"
	@echo "  runserver            to run the Django demo site"
	@echo "  test                 to run the tests during development"
	@echo "  test-all             to run the tests for all the supported environments"
	@echo "  upload               to upload a release to PyPI repository"
	@echo "  venv                 to create the virtualenv"
	@echo

# #########
#   Clean
# #########
#
# Delete all the runtime files generated by the various targets,
# including the virtualenv.

.PHONY: clean-venv
clean-venv:
	rm -rf $(venv_dir)

.PHONY: clean-build
clean-build:
	rm -rf build
	rm -rf src/*.egg-info

.PHONY: clean-docs
clean-docs:
	cd docs && make clean

.PHONY: clean-tests
clean-tests:
	rm -rf .tox
	rm -rf .pytest_cache

.PHONY: clean-mypy
clean-mypy:
	rm -rf .mypy_cache

.PHONY: clean-coverage
clean-coverage:
	rm -rf .coverage
	rm -rf coverage

.PHONY: clean
clean: clean-venv clean-build clean-tests clean-mypy clean-coverage clean-docs

# ##############
#   Virtualenv
# ##############
#
# Create the virtualenv and install all the dependencies for development.
# If the virtualenv already exists then synchronise the installed packages
# with those listed in requirements/dev.txt. The list of packages will be
# updated if any of the input files change.
#
# pip-tools is pinned to version 6.10.0 as 6.11.0 bumped the required version
# of click to be version 8 or higher which is incompatible with the version
# installed by celery 5.0. It's simpler, for now, to pin the pip-tools version
# rather than recompile the requirements files. That would introduce another
# incompatibility between flake8 and the pytest-flake8 plugin which although
# documented as fixed, remains. See https://github.com/PyCQA/flake8/issues/367

$(venv_dir):
	$(site_python) -m venv $(venv_dir)
	$(pip) install --upgrade pip setuptools wheel
	$(pip) install pip-tools==6.10.0

requirements/dev.txt: requirements/dev.in requirements/docs.in requirements/tests.in
	$(pip-compile) requirements/dev.in

requirements/docs.txt: requirements/docs.in
	$(pip-compile) requirements/docs.in

requirements/tests.txt: requirements/docs.in requirements/tests.in
	$(pip-compile) requirements/tests.in

.PHONY: requirements
requirements: requirements/dev.txt requirements/docs.txt requirements/tests.txt

.PHONY: venv
venv: $(venv_dir) requirements
	$(pip-sync) requirements/dev.txt

.PHONY: install
install: venv
	$(pip) install --upgrade pip setuptools wheel
	$(pip) install pip-tools
	test -f requirements/docs.txt || $(pip-compile) requirements/docs.in
	test -f requirements/dev.txt || $(pip-compile) requirements/dev.in
	test -f requirements/tests.txt || $(pip-compile) requirements/tests.in
	$(pip-sync) requirements/dev.txt

# ########
#   Demo
# ########

.PHONY: demo
runserver:
	. bin/activate && $(django) migrate
	. bin/activate && $(django) runserver

# ##########
#   Django
# ##########

.PHONY: messages
messages:
	cd $(app_dir) && \
	$(django) makemessages --no-obsolete --all

.PHONY: translations
translations:
	cd $(app_dir) && \
	$(django) compilemessages

# ##########
#   Checks
# ##########

.PHONY: flake8
flake8:
	$(flake8) $(site_dir)

.PHONY: isort
isort:
	$(isort) --check $(site_dir)

.PHONY: black
black:
	$(black) --check $(site_dir)

.PHONY: mypy
mypy:
	$(mypy) $(site_dir)

.PHONY: checks
checks: flake8 black isort mypy

# ###########
#   Testing
# ###########

.PHONY: coverage
coverage:
	$(pytest) --cov=app_project --cov-config=setup.cfg --cov-report html

.PHONY: test
test:
	$(pytest) $(pytest_opts)

.PHONY: tox
tox: test
	$(tox)
	$(tox) -e docs

# ########
#   Docs
# ########

.PHONY: docs
docs:
	cd docs && make html

# ###########
#   Release
# ###########
#
# Usage:
#   make patch build upload
#   make minor build upload
#   make major build upload

.PHONY: build
build: clean-build
	$(python) setup.py sdist bdist_wheel

.PHONY: major
major:
	$(bumpversion) major

.PHONY: minor
minor:
	$(bumpversion) minor

.PHONY: patch
patch:
	$(bumpversion) patch

.PHONY: upload
upload:
	$(twine) upload $(upload_opts) dist/*
